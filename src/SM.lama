-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

public fun binopCalc (op, a, b) {
	case op of
			"+"  -> (a + b)
		  | "-"  -> (a - b)
		  | "*"  -> (a * b)
		  | "/"  -> (a / b)
		  | "%"  -> (a % b)
		  | "==" -> (a == b)
		  | "!=" -> (a != b)
		  | "<"  -> (a < b)
		  | "<=" -> (a <= b)
		  | ">"  -> (a > b)
		  | ">=" -> (a >= b)
		  | "&&" -> (a && b)
		  | "!!" -> (a !! b)
		esac
}


-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}


-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {
	if size(insns) <= 0 then c 
	else
		case insns[0] of
			BINOP(op) -> eval(env, [singleton(binopCalc(op, c[0][1][0], c[0][0])) +++ c[0][1][1], c[1], c[2]], insns[1])
		  | CONST(n)  -> eval(env, [singleton(n) +++ c[0], c[1], c[2]], insns[1])
		  | LD(x)     -> eval(env, [singleton(c[1](x)) +++ c[0], c[1], c[2]], insns[1])
		  | ST(x)     -> eval(env, [c[0][1], c[1] <- [x, c[0][0]], c[2]], insns[1])
		  | READ        -> local r = readWorld(c[2]); 
		 					 eval(env, [singleton(r[0]) +++ c[0], c[1], r[1]], insns[1])
		  | WRITE       -> local r = writeWorld(c[0][0], c[2]); eval(env, [c[0][1], c[1], r], insns[1])
		  | _             -> printf("??\n"); c
		esac
	fi
}


-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
	case expr of
		Var(x)           -> singleton(LD(x))
	  | Const(n)         -> singleton(CONST(n))
	  | Binop(c, e1, e2) -> compileExpr(e1) +++ compileExpr(e2) +++ singleton(BINOP(c))
	  | _                -> singleton("Can't recognize expr")
	esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
	case stmt of
	    Assn(x, e)       -> compileExpr(e) +++ singleton(ST(x))
	  | Read(x)          -> singleton(READ) +++ singleton(ST(x))
	  | Write(e)         -> compileExpr(e) +++ singleton(WRITE)
	  | Seq(s1, s2)      -> compileSM(s1) +++ compileSM(s2)
	  | _                -> singleton("Can't recognize stmt instruction")
	esac
}
