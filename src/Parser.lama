-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, val, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (val)
  | _    -> val
  esac
}

fun assertVoid (atr, val, loc) {
  case atr of
    Void -> val
  | Val  -> error ("value expected", loc)
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}


fun binop(l, op, r) {
	Binop(op, l, r)
}


-- Primary expression
local primary = memo $ eta (decimal @ fun (x) {Const (stringInt (x))} |
                            lident  @ fun (x) {Var (x)} |
                            inbr (s ("("), exp, s (")"))),
      exp = memo $ eta expr({ 
						[Left, [s("!!") , binop] : {} ],
						[Left, [s("&&") , binop] : {} ], 
						[Nona, {	[s("==") , binop ],
									[s("!=") , binop ],
									[s("<=") , binop ],
									[s("<")  , binop ],
									[s(">=") , binop ],
									[s(">")  , binop ]
								}],
						[Left, { 	[s("+"),   binop ],
									[s("-"),   binop ]
								}],
						[Left, {	[s("*") ,  binop ],
									[s("/") ,  binop ],
									[s("%") ,  binop ]
								}] 
						}, primary);

local elifParser  = memo $ eta syntax(
				kElse x=stmt                                    { x } |
				kElif e=exp kThen x=stmt y=elifParser { If(e, x, y) } 
						);
						
local primaryStmt = memo $ eta syntax( 
				kWrite x=inbr[s("("), exp, s(")")]         { Write(x) } |
				kRead x=inbr[s("("), lident, s(")")]         {Read(x) } |
				x=lident s[":="] e=exp                   { Assn(x, e) } |
				kSkip									        { Skip} |
				kWhile e=exp kDo x=stmt kOd             { While(e, x) } |
				kIf e=exp kThen x=stmt y=elifParser kFi { If(e, x, y) } |
				kIf e=exp kThen x=stmt kFi           { If(e, x, Skip) } |
				kRepeat x=stmt kUntil e=exp             {Repeat(x, e) } |
				kFor x=stmt s[","] e=exp s[","] y=stmt kDo z=stmt kOd  {Seq(x, While(e, Seq(z, y)) ) }
						),
			 stmt = memo $ eta syntax(
						primaryStmt                                     | 
						x=primaryStmt s[";"] y=stmt         {Seq(x, y)}
						);

-- Public top-level parser
public parse = stmt;

(*
fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

local primary  = memo $ eta syntax (
                                    -- decimal constant
                                    loc=pos x=decimal                                 {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}     |

                                    -- identifier
                                    x=lident                                          {fun (a) {
                                                                                         case a of
                                                                                           Ref  -> Ref (x)
                                                                                         | Void -> Ignore (Var (x))
                                                                                         | _    -> Var (x)
                                                                                         esac
                                                                                      }} |
                                    $(failure ("the rest of primary parsing in not implemented\n"))),
      basic    = memo $ eta (expr ({[Right, singleton ([s (":="),
                                                        fun (l, loc, r) {
                                                          fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                                        }])],
                                    [Left , map (binop, singleton ("!!"))],
                                    [Left , map (binop, singleton ("&&"))],
                                    [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                    [Left , map (binop, {"+", "-"})],
                                    [Left , map (binop, {"*", "/", "%"})]
                                   },
                                   primary)),
      exp      = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = syntax (s=exp {s (Void)});
*)
